//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class netcodeNATIVE {
  public static int netcode_init() {
    int ret = netcodeNATIVEPINVOKE.netcode_init();
    return ret;
  }

  public static void netcode_term() {
    netcodeNATIVEPINVOKE.netcode_term();
  }

  public static void netcode_log_level(int level) {
    netcodeNATIVEPINVOKE.netcode_log_level(level);
  }

  public static void netcode_random_bytes(byte[] data, int bytes) {
    netcodeNATIVEPINVOKE.netcode_random_bytes(data, bytes);
  }

  public static SWIGTYPE_p_netcode_client_t netcode_client_create(string address, double time) {
    global::System.IntPtr cPtr = netcodeNATIVEPINVOKE.netcode_client_create(address, time);
    SWIGTYPE_p_netcode_client_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_netcode_client_t(cPtr, false);
    return ret;
  }

  public static void netcode_client_destroy(SWIGTYPE_p_netcode_client_t client) {
    netcodeNATIVEPINVOKE.netcode_client_destroy(SWIGTYPE_p_netcode_client_t.getCPtr(client));
  }

  public static void netcode_client_connect(SWIGTYPE_p_netcode_client_t client, byte[] connect_token) {
    netcodeNATIVEPINVOKE.netcode_client_connect(SWIGTYPE_p_netcode_client_t.getCPtr(client), connect_token);
  }

  public static void netcode_client_update(SWIGTYPE_p_netcode_client_t client, double time) {
    netcodeNATIVEPINVOKE.netcode_client_update(SWIGTYPE_p_netcode_client_t.getCPtr(client), time);
  }

  public static void netcode_client_send_packet(SWIGTYPE_p_netcode_client_t client, byte[] packet_data, int packet_bytes) {
    netcodeNATIVEPINVOKE.netcode_client_send_packet(SWIGTYPE_p_netcode_client_t.getCPtr(client), packet_data, packet_bytes);
  }

  public static System.IntPtr netcode_client_receive_packet(SWIGTYPE_p_netcode_client_t client, out int packet_bytes) { return netcodeNATIVEPINVOKE.netcode_client_receive_packet(SWIGTYPE_p_netcode_client_t.getCPtr(client), out packet_bytes); }

  public static void netcode_client_free_packet(SWIGTYPE_p_netcode_client_t client, System.IntPtr packet) {
    netcodeNATIVEPINVOKE.netcode_client_free_packet(SWIGTYPE_p_netcode_client_t.getCPtr(client), packet);
  }

  public static void netcode_client_disconnect(SWIGTYPE_p_netcode_client_t client) {
    netcodeNATIVEPINVOKE.netcode_client_disconnect(SWIGTYPE_p_netcode_client_t.getCPtr(client));
  }

  public static int netcode_client_state(SWIGTYPE_p_netcode_client_t client) {
    int ret = netcodeNATIVEPINVOKE.netcode_client_state(SWIGTYPE_p_netcode_client_t.getCPtr(client));
    return ret;
  }

  public static int netcode_client_index(SWIGTYPE_p_netcode_client_t client) {
    int ret = netcodeNATIVEPINVOKE.netcode_client_index(SWIGTYPE_p_netcode_client_t.getCPtr(client));
    return ret;
  }

  public static int netcode_generate_connect_token(int num_server_addresses, SWIGTYPE_p_p_char server_addresses, int expire_seconds, System.UInt64 client_id, System.UInt64 protocol_id, System.UInt64 sequence, byte[] private_key, byte[] connect_token) {
    int ret = netcodeNATIVEPINVOKE.netcode_generate_connect_token(num_server_addresses, SWIGTYPE_p_p_char.getCPtr(server_addresses), expire_seconds, client_id, protocol_id, sequence, private_key, connect_token);
    return ret;
  }

  public static SWIGTYPE_p_netcode_server_t netcode_server_create(string bind_address, string public_address, System.UInt64 protocol_id, byte[] private_key, double time) {
    global::System.IntPtr cPtr = netcodeNATIVEPINVOKE.netcode_server_create(bind_address, public_address, protocol_id, private_key, time);
    SWIGTYPE_p_netcode_server_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_netcode_server_t(cPtr, false);
    return ret;
  }

  public static void netcode_server_start(SWIGTYPE_p_netcode_server_t server, int max_clients) {
    netcodeNATIVEPINVOKE.netcode_server_start(SWIGTYPE_p_netcode_server_t.getCPtr(server), max_clients);
  }

  public static void netcode_server_update(SWIGTYPE_p_netcode_server_t client, double time) {
    netcodeNATIVEPINVOKE.netcode_server_update(SWIGTYPE_p_netcode_server_t.getCPtr(client), time);
  }

  public static int netcode_server_client_connected(SWIGTYPE_p_netcode_server_t server, int client_index) {
    int ret = netcodeNATIVEPINVOKE.netcode_server_client_connected(SWIGTYPE_p_netcode_server_t.getCPtr(server), client_index);
    return ret;
  }

  public static void netcode_server_disconnect_client(SWIGTYPE_p_netcode_server_t server, int client_index) {
    netcodeNATIVEPINVOKE.netcode_server_disconnect_client(SWIGTYPE_p_netcode_server_t.getCPtr(server), client_index);
  }

  public static void netcode_server_disconnect_all_clients(SWIGTYPE_p_netcode_server_t server) {
    netcodeNATIVEPINVOKE.netcode_server_disconnect_all_clients(SWIGTYPE_p_netcode_server_t.getCPtr(server));
  }

  public static void netcode_server_send_packet(SWIGTYPE_p_netcode_server_t server, int client_index, byte[] packet_data, int packet_bytes) {
    netcodeNATIVEPINVOKE.netcode_server_send_packet(SWIGTYPE_p_netcode_server_t.getCPtr(server), client_index, packet_data, packet_bytes);
  }

  public static System.IntPtr netcode_server_receive_packet(SWIGTYPE_p_netcode_server_t server, int client_index, out int packet_bytes) { return netcodeNATIVEPINVOKE.netcode_server_receive_packet(SWIGTYPE_p_netcode_server_t.getCPtr(server), client_index, out packet_bytes); }

  public static void netcode_server_free_packet(SWIGTYPE_p_netcode_server_t server, System.IntPtr packet) {
    netcodeNATIVEPINVOKE.netcode_server_free_packet(SWIGTYPE_p_netcode_server_t.getCPtr(server), packet);
  }

  public static int netcode_server_num_clients_connected(SWIGTYPE_p_netcode_server_t server) {
    int ret = netcodeNATIVEPINVOKE.netcode_server_num_clients_connected(SWIGTYPE_p_netcode_server_t.getCPtr(server));
    return ret;
  }

  public static void netcode_server_destroy(SWIGTYPE_p_netcode_server_t server) {
    netcodeNATIVEPINVOKE.netcode_server_destroy(SWIGTYPE_p_netcode_server_t.getCPtr(server));
  }

  public static void netcode_sleep(double seconds) {
    netcodeNATIVEPINVOKE.netcode_sleep(seconds);
  }

  public static double netcode_time() {
    double ret = netcodeNATIVEPINVOKE.netcode_time();
    return ret;
  }

  public static readonly int NETCODE_BIG_ENDIAN = netcodeNATIVEPINVOKE.NETCODE_BIG_ENDIAN_get();
  public static readonly int NETCODE_PLATFORM_WINDOWS = netcodeNATIVEPINVOKE.NETCODE_PLATFORM_WINDOWS_get();
  public static readonly int NETCODE_PLATFORM_MAC = netcodeNATIVEPINVOKE.NETCODE_PLATFORM_MAC_get();
  public static readonly int NETCODE_PLATFORM_UNIX = netcodeNATIVEPINVOKE.NETCODE_PLATFORM_UNIX_get();
  public static readonly int NETCODE_PLATFORM = netcodeNATIVEPINVOKE.NETCODE_PLATFORM_get();
  public static readonly int NETCODE_CONNECT_TOKEN_BYTES = netcodeNATIVEPINVOKE.NETCODE_CONNECT_TOKEN_BYTES_get();
  public static readonly int NETCODE_KEY_BYTES = netcodeNATIVEPINVOKE.NETCODE_KEY_BYTES_get();
  public static readonly int NETCODE_MAC_BYTES = netcodeNATIVEPINVOKE.NETCODE_MAC_BYTES_get();
  public static readonly int NETCODE_NONCE_BYTES = netcodeNATIVEPINVOKE.NETCODE_NONCE_BYTES_get();
  public static readonly int NETCODE_MAX_SERVERS_PER_CONNECT = netcodeNATIVEPINVOKE.NETCODE_MAX_SERVERS_PER_CONNECT_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECT_TOKEN_EXPIRED = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECT_TOKEN_EXPIRED_get();
  public static readonly int NETCODE_CLIENT_STATE_INVALID_CONNECT_TOKEN = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_INVALID_CONNECT_TOKEN_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECTION_TIMED_OUT = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECTION_TIMED_OUT_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECTION_RESPONSE_TIMEOUT = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECTION_RESPONSE_TIMEOUT_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECTION_REQUEST_TIMEOUT = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECTION_REQUEST_TIMEOUT_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECTION_DENIED = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECTION_DENIED_get();
  public static readonly int NETCODE_CLIENT_STATE_DISCONNECTED = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_DISCONNECTED_get();
  public static readonly int NETCODE_CLIENT_STATE_SENDING_CONNECTION_REQUEST = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_SENDING_CONNECTION_REQUEST_get();
  public static readonly int NETCODE_CLIENT_STATE_SENDING_CONNECTION_RESPONSE = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_SENDING_CONNECTION_RESPONSE_get();
  public static readonly int NETCODE_CLIENT_STATE_CONNECTED = netcodeNATIVEPINVOKE.NETCODE_CLIENT_STATE_CONNECTED_get();
  public static readonly int NETCODE_SOCKET_IPV6 = netcodeNATIVEPINVOKE.NETCODE_SOCKET_IPV6_get();
  public static readonly int NETCODE_SOCKET_IPV4 = netcodeNATIVEPINVOKE.NETCODE_SOCKET_IPV4_get();
  public static readonly int NETCODE_MAX_CLIENTS = netcodeNATIVEPINVOKE.NETCODE_MAX_CLIENTS_get();
  public static readonly int NETCODE_MAX_PACKET_SIZE = netcodeNATIVEPINVOKE.NETCODE_MAX_PACKET_SIZE_get();
  public static readonly int NETCODE_LOG_LEVEL_NONE = netcodeNATIVEPINVOKE.NETCODE_LOG_LEVEL_NONE_get();
  public static readonly int NETCODE_LOG_LEVEL_INFO = netcodeNATIVEPINVOKE.NETCODE_LOG_LEVEL_INFO_get();
  public static readonly int NETCODE_LOG_LEVEL_ERROR = netcodeNATIVEPINVOKE.NETCODE_LOG_LEVEL_ERROR_get();
  public static readonly int NETCODE_LOG_LEVEL_DEBUG = netcodeNATIVEPINVOKE.NETCODE_LOG_LEVEL_DEBUG_get();
}
